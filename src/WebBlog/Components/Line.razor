@namespace WebBlog.Components﻿
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums

<ChartJsLineChart @ref="_lineChartJs" Config="@_config" Width="2400" Height="1000" />

@code {
    private LineConfig _config;
    private ChartJsLineChart _lineChartJs;

    [Parameter]
    public List<string> Labels { get; set; }
    [Parameter]
    public List<decimal> Data { get; set; }
    [Parameter]
    public string Title { get; set; }

    protected override void OnInitialized()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = Title
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
{
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Day,
                                TooltipFormat = "DD.MM.YYYY",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            }
                        }
                    }
                }
            }
        };

        var Set = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Fill = false,
            BorderWidth = 1,
            PointRadius = 5,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
            ShowLine = true

        };

        for (int i = 0; i < Data.Count; i++)
        {
            var s = Labels[i];
            var points = new TimeTuple<int>(new Moment(DateTime.Parse(s)), Convert.ToInt32(Data[i]));
            Set.Add(points);
        }

        _config.Data.Datasets.Add(Set);
    }
}